Every language in NL has a k-head two-way nondeterministic finite automaton (2nfa([Formula: see text])) recognizing it. It is known how to build a constant-space verifier algorithm from a 2nfa([Formula: see text]) for the same language with constant-randomness, but with error probability [Image: see text] that can not be reduced further by repetition. We have defined the unpleasant characteristic of the heads that causes the high error as the property of being “windable”. With a tweak on the previous verification algorithm, the error is improved to [Image: see text], where [Formula: see text] is the number of windable heads. Using this new algorithm, a subset of languages in NL that have a 2nfa([Formula: see text]) recognizer with [Formula: see text] can be verified with arbitrarily reducible error using constant space and randomness.